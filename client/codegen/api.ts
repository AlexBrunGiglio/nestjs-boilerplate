/* tslint:disable */
/* eslint-disable */
/**
 * API template
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppTypeDto
 */
export interface AppTypeDto {
    /**
     * 
     * @type {string}
     * @memberof AppTypeDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppTypeDto
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof AppTypeDto
     */
    'code': string;
    /**
     * 
     * @type {Array<AppValueDto>}
     * @memberof AppTypeDto
     */
    'appValues': Array<AppValueDto>;
}
/**
 * 
 * @export
 * @interface AppValueDto
 */
export interface AppValueDto {
    /**
     * 
     * @type {string}
     * @memberof AppValueDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppValueDto
     */
    'label': string;
    /**
     * 
     * @type {number}
     * @memberof AppValueDto
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof AppValueDto
     */
    'code': string;
    /**
     * 
     * @type {AppTypeDto}
     * @memberof AppValueDto
     */
    'appType': AppTypeDto;
    /**
     * 
     * @type {string}
     * @memberof AppValueDto
     */
    'appTypeId': string;
    /**
     * 
     * @type {boolean}
     * @memberof AppValueDto
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface BaseSearchRequest
 */
export interface BaseSearchRequest {
    /**
     * The start of the request
     * @type {number}
     * @memberof BaseSearchRequest
     */
    'start'?: number;
    /**
     * The length of the request
     * @type {number}
     * @memberof BaseSearchRequest
     */
    'length'?: number;
    /**
     * order by field
     * @type {string}
     * @memberof BaseSearchRequest
     */
    'orderby'?: string;
    /**
     * order direction (asc | desc)
     * @type {string}
     * @memberof BaseSearchRequest
     */
    'order'?: string;
    /**
     * Search
     * @type {string}
     * @memberof BaseSearchRequest
     */
    'search'?: string;
}
/**
 * 
 * @export
 * @interface FileDto
 */
export interface FileDto {
    /**
     * 
     * @type {string}
     * @memberof FileDto
     */
    'id'?: string;
    /**
     * 
     * @type {Date}
     * @memberof FileDto
     */
    'creationDate'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FileDto
     */
    'modifDate'?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof FileDto
     */
    'archived': boolean;
    /**
     * 
     * @type {string}
     * @memberof FileDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FileDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof FileDto
     */
    'originalname': string;
    /**
     * 
     * @type {string}
     * @memberof FileDto
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof FileDto
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GenericResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GenericResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GenericResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface GetAppTypeResponse
 */
export interface GetAppTypeResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetAppTypeResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetAppTypeResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetAppTypeResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetAppTypeResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAppTypeResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAppTypeResponse
     */
    'token'?: string;
    /**
     * 
     * @type {GetAppTypeResponseAppType}
     * @memberof GetAppTypeResponse
     */
    'appType': GetAppTypeResponseAppType;
}
/**
 * 
 * @export
 * @interface GetAppTypeResponseAppType
 */
export interface GetAppTypeResponseAppType {
    /**
     * 
     * @type {string}
     * @memberof GetAppTypeResponseAppType
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAppTypeResponseAppType
     */
    'label': string;
    /**
     * 
     * @type {string}
     * @memberof GetAppTypeResponseAppType
     */
    'code': string;
    /**
     * 
     * @type {Array<AppValueDto>}
     * @memberof GetAppTypeResponseAppType
     */
    'appValues': Array<AppValueDto>;
}
/**
 * 
 * @export
 * @interface GetAppTypesResponse
 */
export interface GetAppTypesResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetAppTypesResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetAppTypesResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetAppTypesResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetAppTypesResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAppTypesResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAppTypesResponse
     */
    'token'?: string;
    /**
     * 
     * @type {Array<AppTypeDto>}
     * @memberof GetAppTypesResponse
     */
    'appTypes': Array<AppTypeDto>;
}
/**
 * 
 * @export
 * @interface GetAppValueResponse
 */
export interface GetAppValueResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetAppValueResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetAppValueResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetAppValueResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetAppValueResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAppValueResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAppValueResponse
     */
    'token'?: string;
    /**
     * 
     * @type {GetAppValueResponseAppValue}
     * @memberof GetAppValueResponse
     */
    'appValue': GetAppValueResponseAppValue;
}
/**
 * 
 * @export
 * @interface GetAppValueResponseAppValue
 */
export interface GetAppValueResponseAppValue {
    /**
     * 
     * @type {string}
     * @memberof GetAppValueResponseAppValue
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAppValueResponseAppValue
     */
    'label': string;
    /**
     * 
     * @type {number}
     * @memberof GetAppValueResponseAppValue
     */
    'order'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetAppValueResponseAppValue
     */
    'code': string;
    /**
     * 
     * @type {AppTypeDto}
     * @memberof GetAppValueResponseAppValue
     */
    'appType': AppTypeDto;
    /**
     * 
     * @type {string}
     * @memberof GetAppValueResponseAppValue
     */
    'appTypeId': string;
    /**
     * 
     * @type {boolean}
     * @memberof GetAppValueResponseAppValue
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface GetFileResponse
 */
export interface GetFileResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetFileResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetFileResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetFileResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetFileResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetFileResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFileResponse
     */
    'token'?: string;
    /**
     * 
     * @type {FileDto}
     * @memberof GetFileResponse
     */
    'file': FileDto;
}
/**
 * 
 * @export
 * @interface GetFilesResponse
 */
export interface GetFilesResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetFilesResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetFilesResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetFilesResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetFilesResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetFilesResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFilesResponse
     */
    'token'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetFilesResponse
     */
    'filteredResults': object;
    /**
     * 
     * @type {Array<FileDto>}
     * @memberof GetFilesResponse
     */
    'files': Array<FileDto>;
}
/**
 * 
 * @export
 * @interface GetLogsRequest
 */
export interface GetLogsRequest {
    /**
     * The start of the request
     * @type {number}
     * @memberof GetLogsRequest
     */
    'start'?: number;
    /**
     * The length of the request
     * @type {number}
     * @memberof GetLogsRequest
     */
    'length'?: number;
    /**
     * order by field
     * @type {string}
     * @memberof GetLogsRequest
     */
    'orderby'?: string;
    /**
     * order direction (asc | desc)
     * @type {string}
     * @memberof GetLogsRequest
     */
    'order'?: string;
    /**
     * Search
     * @type {string}
     * @memberof GetLogsRequest
     */
    'search'?: string;
    /**
     * Search by code
     * @type {string}
     * @memberof GetLogsRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface GetLogsResponse
 */
export interface GetLogsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetLogsResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetLogsResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetLogsResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetLogsResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetLogsResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetLogsResponse
     */
    'token'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetLogsResponse
     */
    'filteredResults': object;
    /**
     * 
     * @type {Array<LogDto>}
     * @memberof GetLogsResponse
     */
    'logs': Array<LogDto>;
}
/**
 * 
 * @export
 * @interface GetStatResponse
 */
export interface GetStatResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetStatResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetStatResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetStatResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetStatResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetStatResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStatResponse
     */
    'token'?: string;
    /**
     * 
     * @type {StatDto}
     * @memberof GetStatResponse
     */
    'stat': StatDto;
}
/**
 * 
 * @export
 * @interface GetStatsResponse
 */
export interface GetStatsResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetStatsResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetStatsResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetStatsResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStatsResponse
     */
    'token'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetStatsResponse
     */
    'filteredResults': object;
    /**
     * 
     * @type {Array<StatDto>}
     * @memberof GetStatsResponse
     */
    'stats': Array<StatDto>;
}
/**
 * 
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetUserResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetUserResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetUserResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetUserResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserResponse
     */
    'token'?: string;
    /**
     * 
     * @type {UserDto}
     * @memberof GetUserResponse
     */
    'user': UserDto;
}
/**
 * 
 * @export
 * @interface GetUserRoleResponse
 */
export interface GetUserRoleResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetUserRoleResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetUserRoleResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetUserRoleResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetUserRoleResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserRoleResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserRoleResponse
     */
    'token'?: string;
    /**
     * 
     * @type {UserRoleDto}
     * @memberof GetUserRoleResponse
     */
    'userRole': UserRoleDto;
}
/**
 * 
 * @export
 * @interface GetUserRolesResponse
 */
export interface GetUserRolesResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetUserRolesResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetUserRolesResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetUserRolesResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetUserRolesResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserRolesResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserRolesResponse
     */
    'token'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetUserRolesResponse
     */
    'filteredResults': object;
    /**
     * 
     * @type {Array<UserRoleDto>}
     * @memberof GetUserRolesResponse
     */
    'userRoles': Array<UserRoleDto>;
}
/**
 * 
 * @export
 * @interface GetUsersResponse
 */
export interface GetUsersResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GetUsersResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof GetUsersResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetUsersResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetUsersResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUsersResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUsersResponse
     */
    'token'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetUsersResponse
     */
    'filteredResults': object;
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof GetUsersResponse
     */
    'users': Array<UserDto>;
}
/**
 * 
 * @export
 * @interface LogDto
 */
export interface LogDto {
    /**
     * 
     * @type {string}
     * @memberof LogDto
     */
    'id'?: string;
    /**
     * 
     * @type {Date}
     * @memberof LogDto
     */
    'creationDate'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LogDto
     */
    'modifDate'?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof LogDto
     */
    'archived': boolean;
    /**
     * 
     * @type {string}
     * @memberof LogDto
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogDto
     */
    'dbError': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponse
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof LoginResponse
     */
    'error'?: object;
    /**
     * 
     * @type {number}
     * @memberof LoginResponse
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'errorGuid'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'refreshToken': string;
}
/**
 * 
 * @export
 * @interface LoginViewModel
 */
export interface LoginViewModel {
    /**
     * 
     * @type {string}
     * @memberof LoginViewModel
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginViewModel
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface MultipleAppValuesRequest
 */
export interface MultipleAppValuesRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof MultipleAppValuesRequest
     */
    'ids'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MultipleAppValuesRequest
     */
    'codes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * user email
     * @type {string}
     * @memberof RegisterRequest
     */
    'mail': string;
    /**
     * user password
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
    /**
     * user username
     * @type {string}
     * @memberof RegisterRequest
     */
    'username': string;
    /**
     * user first name
     * @type {string}
     * @memberof RegisterRequest
     */
    'firstName'?: string;
    /**
     * user last name
     * @type {string}
     * @memberof RegisterRequest
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @interface StatDto
 */
export interface StatDto {
    /**
     * 
     * @type {string}
     * @memberof StatDto
     */
    'id'?: string;
    /**
     * 
     * @type {Date}
     * @memberof StatDto
     */
    'creationDate'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StatDto
     */
    'modifDate'?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof StatDto
     */
    'archived': boolean;
    /**
     * 
     * @type {string}
     * @memberof StatDto
     */
    'label'?: string;
    /**
     * 
     * @type {number}
     * @memberof StatDto
     */
    'value': number;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'mail'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'presentation'?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserDto
     */
    'creationDate'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserDto
     */
    'modifDate'?: Date;
    /**
     * 
     * @type {Array<UserRoleDto>}
     * @memberof UserDto
     */
    'roles'?: Array<UserRoleDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'rolesString'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'disabled': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'initial'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'imgUrl'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    'accountActivated'?: boolean;
    /**
     * 
     * @type {Array<FileDto>}
     * @memberof UserDto
     */
    'files'?: Array<FileDto>;
}
/**
 * 
 * @export
 * @interface UserRoleDto
 */
export interface UserRoleDto {
    /**
     * 
     * @type {string}
     * @memberof UserRoleDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleDto
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof UserRoleDto
     */
    'label'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserRoleDto
     */
    'disabled'?: boolean;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerActivateAccount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/activate-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {LoginViewModel} loginViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginViewModel: LoginViewModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginViewModel' is not null or undefined
            assertParamExists('authControllerLogin', 'loginViewModel', loginViewModel)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('authControllerRefresh', 'token', token)
            const localVarPath = `/api/auth/refreshToken/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (registerRequest: RegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('authControllerRegister', 'registerRequest', registerRequest)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerActivateAccount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerActivateAccount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {LoginViewModel} loginViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginViewModel: LoginViewModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginViewModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRefresh(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRefresh(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(registerRequest: RegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(registerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerActivateAccount(options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.authControllerActivateAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {LoginViewModel} loginViewModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginViewModel: LoginViewModel, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.authControllerLogin(loginViewModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.authControllerLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh(token: string, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.authControllerRefresh(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(registerRequest: RegisterRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.authControllerRegister(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authControllerLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerLoginRequest
 */
export interface AuthApiAuthControllerLoginRequest {
    /**
     * 
     * @type {LoginViewModel}
     * @memberof AuthApiAuthControllerLogin
     */
    readonly loginViewModel: LoginViewModel
}

/**
 * Request parameters for authControllerRefresh operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerRefreshRequest
 */
export interface AuthApiAuthControllerRefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthControllerRefresh
     */
    readonly token: string
}

/**
 * Request parameters for authControllerRegister operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerRegisterRequest
 */
export interface AuthApiAuthControllerRegisterRequest {
    /**
     * 
     * @type {RegisterRequest}
     * @memberof AuthApiAuthControllerRegister
     */
    readonly registerRequest: RegisterRequest
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerActivateAccount(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerActivateAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {AuthApiAuthControllerLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(requestParameters: AuthApiAuthControllerLoginRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(requestParameters.loginViewModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogout(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {AuthApiAuthControllerRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRefresh(requestParameters: AuthApiAuthControllerRefreshRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRefresh(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {AuthApiAuthControllerRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRegister(requestParameters: AuthApiAuthControllerRegisterRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRegister(requestParameters.registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filesControllerGet', 'id', id)
            const localVarPath = `/api/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {BaseSearchRequest} baseSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerGetAll: async (baseSearchRequest: BaseSearchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseSearchRequest' is not null or undefined
            assertParamExists('filesControllerGetAll', 'baseSearchRequest', baseSearchRequest)
            const localVarPath = `/api/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUploadSingle: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/files/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {BaseSearchRequest} baseSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerGetAll(baseSearchRequest: BaseSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerGetAll(baseSearchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerUploadSingle(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerUploadSingle(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerGet(id: string, options?: any): AxiosPromise<GetFileResponse> {
            return localVarFp.filesControllerGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {BaseSearchRequest} baseSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerGetAll(baseSearchRequest: BaseSearchRequest, options?: any): AxiosPromise<GetFilesResponse> {
            return localVarFp.filesControllerGetAll(baseSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUploadSingle(options?: any): AxiosPromise<GetFileResponse> {
            return localVarFp.filesControllerUploadSingle(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for filesControllerGet operation in FilesApi.
 * @export
 * @interface FilesApiFilesControllerGetRequest
 */
export interface FilesApiFilesControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesApiFilesControllerGet
     */
    readonly id: string
}

/**
 * Request parameters for filesControllerGetAll operation in FilesApi.
 * @export
 * @interface FilesApiFilesControllerGetAllRequest
 */
export interface FilesApiFilesControllerGetAllRequest {
    /**
     * 
     * @type {BaseSearchRequest}
     * @memberof FilesApiFilesControllerGetAll
     */
    readonly baseSearchRequest: BaseSearchRequest
}

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {FilesApiFilesControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerGet(requestParameters: FilesApiFilesControllerGetRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesControllerGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {FilesApiFilesControllerGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerGetAll(requestParameters: FilesApiFilesControllerGetAllRequest, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesControllerGetAll(requestParameters.baseSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerUploadSingle(options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesControllerUploadSingle(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogsApi - axios parameter creator
 * @export
 */
export const LogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} logIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsControllerDelete: async (logIds: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logIds' is not null or undefined
            assertParamExists('logsControllerDelete', 'logIds', logIds)
            const localVarPath = `/api/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (logIds !== undefined) {
                localVarQueryParameter['logIds'] = logIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {GetLogsRequest} getLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsControllerGetAll: async (getLogsRequest: GetLogsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getLogsRequest' is not null or undefined
            assertParamExists('logsControllerGetAll', 'getLogsRequest', getLogsRequest)
            const localVarPath = `/api/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getLogsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogsApi - functional programming interface
 * @export
 */
export const LogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {string} logIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsControllerDelete(logIds: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsControllerDelete(logIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {GetLogsRequest} getLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsControllerGetAll(getLogsRequest: GetLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetLogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsControllerGetAll(getLogsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogsApi - factory interface
 * @export
 */
export const LogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogsApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {string} logIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsControllerDelete(logIds: string, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.logsControllerDelete(logIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {GetLogsRequest} getLogsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsControllerGetAll(getLogsRequest: GetLogsRequest, options?: any): AxiosPromise<GetLogsResponse> {
            return localVarFp.logsControllerGetAll(getLogsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for logsControllerDelete operation in LogsApi.
 * @export
 * @interface LogsApiLogsControllerDeleteRequest
 */
export interface LogsApiLogsControllerDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof LogsApiLogsControllerDelete
     */
    readonly logIds: string
}

/**
 * Request parameters for logsControllerGetAll operation in LogsApi.
 * @export
 * @interface LogsApiLogsControllerGetAllRequest
 */
export interface LogsApiLogsControllerGetAllRequest {
    /**
     * 
     * @type {GetLogsRequest}
     * @memberof LogsApiLogsControllerGetAll
     */
    readonly getLogsRequest: GetLogsRequest
}

/**
 * LogsApi - object-oriented interface
 * @export
 * @class LogsApi
 * @extends {BaseAPI}
 */
export class LogsApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {LogsApiLogsControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    public logsControllerDelete(requestParameters: LogsApiLogsControllerDeleteRequest, options?: AxiosRequestConfig) {
        return LogsApiFp(this.configuration).logsControllerDelete(requestParameters.logIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {LogsApiLogsControllerGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsApi
     */
    public logsControllerGetAll(requestParameters: LogsApiLogsControllerGetAllRequest, options?: AxiosRequestConfig) {
        return LogsApiFp(this.configuration).logsControllerGetAll(requestParameters.getLogsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReferentialApi - axios parameter creator
 * @export
 */
export const ReferentialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {MultipleAppValuesRequest} multipleAppValuesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerDisableAppValues: async (multipleAppValuesRequest: MultipleAppValuesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'multipleAppValuesRequest' is not null or undefined
            assertParamExists('referentialControllerDisableAppValues', 'multipleAppValuesRequest', multipleAppValuesRequest)
            const localVarPath = `/api/referential/app-values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(multipleAppValuesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} appTypesCodes Get with AppTypesCodes
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerGetMultipleTypeValues: async (appTypesCodes: string, start?: number, length?: number, orderby?: string, order?: string, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appTypesCodes' is not null or undefined
            assertParamExists('referentialControllerGetMultipleTypeValues', 'appTypesCodes', appTypesCodes)
            const localVarPath = `/api/referential/app-types/multiple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (appTypesCodes !== undefined) {
                localVarQueryParameter['appTypesCodes'] = appTypesCodes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerGetOneAppType: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('referentialControllerGetOneAppType', 'id', id)
            const localVarPath = `/api/referential/app-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} appTypeCode 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [alsoDisabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerGetTypeValues: async (appTypeCode: string, start?: number, length?: number, orderby?: string, order?: string, search?: string, alsoDisabled?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appTypeCode' is not null or undefined
            assertParamExists('referentialControllerGetTypeValues', 'appTypeCode', appTypeCode)
            const localVarPath = `/api/referential/app-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (appTypeCode !== undefined) {
                localVarQueryParameter['appTypeCode'] = appTypeCode;
            }

            if (alsoDisabled !== undefined) {
                localVarQueryParameter['alsoDisabled'] = alsoDisabled;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {AppTypeDto} appTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerInsertOrUpdateAppType: async (appTypeDto: AppTypeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appTypeDto' is not null or undefined
            assertParamExists('referentialControllerInsertOrUpdateAppType', 'appTypeDto', appTypeDto)
            const localVarPath = `/api/referential/app-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appTypeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {AppValueDto} appValueDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerInsertOrUpdateAppValue: async (appValueDto: AppValueDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appValueDto' is not null or undefined
            assertParamExists('referentialControllerInsertOrUpdateAppValue', 'appValueDto', appValueDto)
            const localVarPath = `/api/referential/app-values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appValueDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {MultipleAppValuesRequest} multipleAppValuesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerRemoveAppValues: async (multipleAppValuesRequest: MultipleAppValuesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'multipleAppValuesRequest' is not null or undefined
            assertParamExists('referentialControllerRemoveAppValues', 'multipleAppValuesRequest', multipleAppValuesRequest)
            const localVarPath = `/api/referential/app-values`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(multipleAppValuesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferentialApi - functional programming interface
 * @export
 */
export const ReferentialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferentialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {MultipleAppValuesRequest} multipleAppValuesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async referentialControllerDisableAppValues(multipleAppValuesRequest: MultipleAppValuesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.referentialControllerDisableAppValues(multipleAppValuesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} appTypesCodes Get with AppTypesCodes
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async referentialControllerGetMultipleTypeValues(appTypesCodes: string, start?: number, length?: number, orderby?: string, order?: string, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.referentialControllerGetMultipleTypeValues(appTypesCodes, start, length, orderby, order, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async referentialControllerGetOneAppType(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.referentialControllerGetOneAppType(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} appTypeCode 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [alsoDisabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async referentialControllerGetTypeValues(appTypeCode: string, start?: number, length?: number, orderby?: string, order?: string, search?: string, alsoDisabled?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.referentialControllerGetTypeValues(appTypeCode, start, length, orderby, order, search, alsoDisabled, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {AppTypeDto} appTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async referentialControllerInsertOrUpdateAppType(appTypeDto: AppTypeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.referentialControllerInsertOrUpdateAppType(appTypeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {AppValueDto} appValueDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async referentialControllerInsertOrUpdateAppValue(appValueDto: AppValueDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppValueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.referentialControllerInsertOrUpdateAppValue(appValueDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {MultipleAppValuesRequest} multipleAppValuesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async referentialControllerRemoveAppValues(multipleAppValuesRequest: MultipleAppValuesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.referentialControllerRemoveAppValues(multipleAppValuesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferentialApi - factory interface
 * @export
 */
export const ReferentialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferentialApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {MultipleAppValuesRequest} multipleAppValuesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerDisableAppValues(multipleAppValuesRequest: MultipleAppValuesRequest, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.referentialControllerDisableAppValues(multipleAppValuesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} appTypesCodes Get with AppTypesCodes
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerGetMultipleTypeValues(appTypesCodes: string, start?: number, length?: number, orderby?: string, order?: string, search?: string, options?: any): AxiosPromise<GetAppTypesResponse> {
            return localVarFp.referentialControllerGetMultipleTypeValues(appTypesCodes, start, length, orderby, order, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerGetOneAppType(id: string, options?: any): AxiosPromise<GetAppTypeResponse> {
            return localVarFp.referentialControllerGetOneAppType(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} appTypeCode 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [alsoDisabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerGetTypeValues(appTypeCode: string, start?: number, length?: number, orderby?: string, order?: string, search?: string, alsoDisabled?: string, options?: any): AxiosPromise<GetAppTypeResponse> {
            return localVarFp.referentialControllerGetTypeValues(appTypeCode, start, length, orderby, order, search, alsoDisabled, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {AppTypeDto} appTypeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerInsertOrUpdateAppType(appTypeDto: AppTypeDto, options?: any): AxiosPromise<GetAppTypeResponse> {
            return localVarFp.referentialControllerInsertOrUpdateAppType(appTypeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {AppValueDto} appValueDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerInsertOrUpdateAppValue(appValueDto: AppValueDto, options?: any): AxiosPromise<GetAppValueResponse> {
            return localVarFp.referentialControllerInsertOrUpdateAppValue(appValueDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {MultipleAppValuesRequest} multipleAppValuesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        referentialControllerRemoveAppValues(multipleAppValuesRequest: MultipleAppValuesRequest, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.referentialControllerRemoveAppValues(multipleAppValuesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for referentialControllerDisableAppValues operation in ReferentialApi.
 * @export
 * @interface ReferentialApiReferentialControllerDisableAppValuesRequest
 */
export interface ReferentialApiReferentialControllerDisableAppValuesRequest {
    /**
     * 
     * @type {MultipleAppValuesRequest}
     * @memberof ReferentialApiReferentialControllerDisableAppValues
     */
    readonly multipleAppValuesRequest: MultipleAppValuesRequest
}

/**
 * Request parameters for referentialControllerGetMultipleTypeValues operation in ReferentialApi.
 * @export
 * @interface ReferentialApiReferentialControllerGetMultipleTypeValuesRequest
 */
export interface ReferentialApiReferentialControllerGetMultipleTypeValuesRequest {
    /**
     * Get with AppTypesCodes
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetMultipleTypeValues
     */
    readonly appTypesCodes: string

    /**
     * The start of the request
     * @type {number}
     * @memberof ReferentialApiReferentialControllerGetMultipleTypeValues
     */
    readonly start?: number

    /**
     * The length of the request
     * @type {number}
     * @memberof ReferentialApiReferentialControllerGetMultipleTypeValues
     */
    readonly length?: number

    /**
     * order by field
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetMultipleTypeValues
     */
    readonly orderby?: string

    /**
     * order direction (asc | desc)
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetMultipleTypeValues
     */
    readonly order?: string

    /**
     * Search
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetMultipleTypeValues
     */
    readonly search?: string
}

/**
 * Request parameters for referentialControllerGetOneAppType operation in ReferentialApi.
 * @export
 * @interface ReferentialApiReferentialControllerGetOneAppTypeRequest
 */
export interface ReferentialApiReferentialControllerGetOneAppTypeRequest {
    /**
     * 
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetOneAppType
     */
    readonly id: string
}

/**
 * Request parameters for referentialControllerGetTypeValues operation in ReferentialApi.
 * @export
 * @interface ReferentialApiReferentialControllerGetTypeValuesRequest
 */
export interface ReferentialApiReferentialControllerGetTypeValuesRequest {
    /**
     * 
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetTypeValues
     */
    readonly appTypeCode: string

    /**
     * The start of the request
     * @type {number}
     * @memberof ReferentialApiReferentialControllerGetTypeValues
     */
    readonly start?: number

    /**
     * The length of the request
     * @type {number}
     * @memberof ReferentialApiReferentialControllerGetTypeValues
     */
    readonly length?: number

    /**
     * order by field
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetTypeValues
     */
    readonly orderby?: string

    /**
     * order direction (asc | desc)
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetTypeValues
     */
    readonly order?: string

    /**
     * Search
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetTypeValues
     */
    readonly search?: string

    /**
     * 
     * @type {string}
     * @memberof ReferentialApiReferentialControllerGetTypeValues
     */
    readonly alsoDisabled?: string
}

/**
 * Request parameters for referentialControllerInsertOrUpdateAppType operation in ReferentialApi.
 * @export
 * @interface ReferentialApiReferentialControllerInsertOrUpdateAppTypeRequest
 */
export interface ReferentialApiReferentialControllerInsertOrUpdateAppTypeRequest {
    /**
     * 
     * @type {AppTypeDto}
     * @memberof ReferentialApiReferentialControllerInsertOrUpdateAppType
     */
    readonly appTypeDto: AppTypeDto
}

/**
 * Request parameters for referentialControllerInsertOrUpdateAppValue operation in ReferentialApi.
 * @export
 * @interface ReferentialApiReferentialControllerInsertOrUpdateAppValueRequest
 */
export interface ReferentialApiReferentialControllerInsertOrUpdateAppValueRequest {
    /**
     * 
     * @type {AppValueDto}
     * @memberof ReferentialApiReferentialControllerInsertOrUpdateAppValue
     */
    readonly appValueDto: AppValueDto
}

/**
 * Request parameters for referentialControllerRemoveAppValues operation in ReferentialApi.
 * @export
 * @interface ReferentialApiReferentialControllerRemoveAppValuesRequest
 */
export interface ReferentialApiReferentialControllerRemoveAppValuesRequest {
    /**
     * 
     * @type {MultipleAppValuesRequest}
     * @memberof ReferentialApiReferentialControllerRemoveAppValues
     */
    readonly multipleAppValuesRequest: MultipleAppValuesRequest
}

/**
 * ReferentialApi - object-oriented interface
 * @export
 * @class ReferentialApi
 * @extends {BaseAPI}
 */
export class ReferentialApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {ReferentialApiReferentialControllerDisableAppValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentialApi
     */
    public referentialControllerDisableAppValues(requestParameters: ReferentialApiReferentialControllerDisableAppValuesRequest, options?: AxiosRequestConfig) {
        return ReferentialApiFp(this.configuration).referentialControllerDisableAppValues(requestParameters.multipleAppValuesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {ReferentialApiReferentialControllerGetMultipleTypeValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentialApi
     */
    public referentialControllerGetMultipleTypeValues(requestParameters: ReferentialApiReferentialControllerGetMultipleTypeValuesRequest, options?: AxiosRequestConfig) {
        return ReferentialApiFp(this.configuration).referentialControllerGetMultipleTypeValues(requestParameters.appTypesCodes, requestParameters.start, requestParameters.length, requestParameters.orderby, requestParameters.order, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {ReferentialApiReferentialControllerGetOneAppTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentialApi
     */
    public referentialControllerGetOneAppType(requestParameters: ReferentialApiReferentialControllerGetOneAppTypeRequest, options?: AxiosRequestConfig) {
        return ReferentialApiFp(this.configuration).referentialControllerGetOneAppType(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {ReferentialApiReferentialControllerGetTypeValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentialApi
     */
    public referentialControllerGetTypeValues(requestParameters: ReferentialApiReferentialControllerGetTypeValuesRequest, options?: AxiosRequestConfig) {
        return ReferentialApiFp(this.configuration).referentialControllerGetTypeValues(requestParameters.appTypeCode, requestParameters.start, requestParameters.length, requestParameters.orderby, requestParameters.order, requestParameters.search, requestParameters.alsoDisabled, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {ReferentialApiReferentialControllerInsertOrUpdateAppTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentialApi
     */
    public referentialControllerInsertOrUpdateAppType(requestParameters: ReferentialApiReferentialControllerInsertOrUpdateAppTypeRequest, options?: AxiosRequestConfig) {
        return ReferentialApiFp(this.configuration).referentialControllerInsertOrUpdateAppType(requestParameters.appTypeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {ReferentialApiReferentialControllerInsertOrUpdateAppValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentialApi
     */
    public referentialControllerInsertOrUpdateAppValue(requestParameters: ReferentialApiReferentialControllerInsertOrUpdateAppValueRequest, options?: AxiosRequestConfig) {
        return ReferentialApiFp(this.configuration).referentialControllerInsertOrUpdateAppValue(requestParameters.appValueDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {ReferentialApiReferentialControllerRemoveAppValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferentialApi
     */
    public referentialControllerRemoveAppValues(requestParameters: ReferentialApiReferentialControllerRemoveAppValuesRequest, options?: AxiosRequestConfig) {
        return ReferentialApiFp(this.configuration).referentialControllerRemoveAppValues(requestParameters.multipleAppValuesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StatsApi - axios parameter creator
 * @export
 */
export const StatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {StatDto} statDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsControllerCreateOrUpdate: async (statDto: StatDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statDto' is not null or undefined
            assertParamExists('statsControllerCreateOrUpdate', 'statDto', statDto)
            const localVarPath = `/api/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(statDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} label 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsControllerGet: async (label: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'label' is not null or undefined
            assertParamExists('statsControllerGet', 'label', label)
            const localVarPath = `/api/stats/{label}`
                .replace(`{${"label"}}`, encodeURIComponent(String(label)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [label] Label of the stat requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsControllerGetAll: async (start?: number, length?: number, orderby?: string, order?: string, search?: string, label?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = label;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatsApi - functional programming interface
 * @export
 */
export const StatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {StatDto} statDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statsControllerCreateOrUpdate(statDto: StatDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStatResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statsControllerCreateOrUpdate(statDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} label 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statsControllerGet(label: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStatResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statsControllerGet(label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [label] Label of the stat requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statsControllerGetAll(start?: number, length?: number, orderby?: string, order?: string, search?: string, label?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statsControllerGetAll(start, length, orderby, order, search, label, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatsApi - factory interface
 * @export
 */
export const StatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatsApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {StatDto} statDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsControllerCreateOrUpdate(statDto: StatDto, options?: any): AxiosPromise<GetStatResponse> {
            return localVarFp.statsControllerCreateOrUpdate(statDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} label 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsControllerGet(label: string, options?: any): AxiosPromise<GetStatResponse> {
            return localVarFp.statsControllerGet(label, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [label] Label of the stat requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsControllerGetAll(start?: number, length?: number, orderby?: string, order?: string, search?: string, label?: string, options?: any): AxiosPromise<GetStatsResponse> {
            return localVarFp.statsControllerGetAll(start, length, orderby, order, search, label, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for statsControllerCreateOrUpdate operation in StatsApi.
 * @export
 * @interface StatsApiStatsControllerCreateOrUpdateRequest
 */
export interface StatsApiStatsControllerCreateOrUpdateRequest {
    /**
     * 
     * @type {StatDto}
     * @memberof StatsApiStatsControllerCreateOrUpdate
     */
    readonly statDto: StatDto
}

/**
 * Request parameters for statsControllerGet operation in StatsApi.
 * @export
 * @interface StatsApiStatsControllerGetRequest
 */
export interface StatsApiStatsControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof StatsApiStatsControllerGet
     */
    readonly label: string
}

/**
 * Request parameters for statsControllerGetAll operation in StatsApi.
 * @export
 * @interface StatsApiStatsControllerGetAllRequest
 */
export interface StatsApiStatsControllerGetAllRequest {
    /**
     * The start of the request
     * @type {number}
     * @memberof StatsApiStatsControllerGetAll
     */
    readonly start?: number

    /**
     * The length of the request
     * @type {number}
     * @memberof StatsApiStatsControllerGetAll
     */
    readonly length?: number

    /**
     * order by field
     * @type {string}
     * @memberof StatsApiStatsControllerGetAll
     */
    readonly orderby?: string

    /**
     * order direction (asc | desc)
     * @type {string}
     * @memberof StatsApiStatsControllerGetAll
     */
    readonly order?: string

    /**
     * Search
     * @type {string}
     * @memberof StatsApiStatsControllerGetAll
     */
    readonly search?: string

    /**
     * Label of the stat requested
     * @type {string}
     * @memberof StatsApiStatsControllerGetAll
     */
    readonly label?: string
}

/**
 * StatsApi - object-oriented interface
 * @export
 * @class StatsApi
 * @extends {BaseAPI}
 */
export class StatsApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {StatsApiStatsControllerCreateOrUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public statsControllerCreateOrUpdate(requestParameters: StatsApiStatsControllerCreateOrUpdateRequest, options?: AxiosRequestConfig) {
        return StatsApiFp(this.configuration).statsControllerCreateOrUpdate(requestParameters.statDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {StatsApiStatsControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public statsControllerGet(requestParameters: StatsApiStatsControllerGetRequest, options?: AxiosRequestConfig) {
        return StatsApiFp(this.configuration).statsControllerGet(requestParameters.label, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {StatsApiStatsControllerGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public statsControllerGetAll(requestParameters: StatsApiStatsControllerGetAllRequest = {}, options?: AxiosRequestConfig) {
        return StatsApiFp(this.configuration).statsControllerGetAll(requestParameters.start, requestParameters.length, requestParameters.orderby, requestParameters.order, requestParameters.search, requestParameters.label, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateOrUpdate: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('usersControllerCreateOrUpdate', 'userDto', userDto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteAccount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/archive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} userIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUsers: async (userIds: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIds' is not null or undefined
            assertParamExists('usersControllerDeleteUsers', 'userIds', userIds)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userIds !== undefined) {
                localVarQueryParameter['userIds'] = userIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerGet', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [role] Roles separated by comma
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetAll: async (start?: number, length?: number, orderby?: string, order?: string, search?: string, role?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreateOrUpdate(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreateOrUpdate(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerDeleteAccount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerDeleteAccount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} userIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerDeleteUsers(userIds: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerDeleteUsers(userIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [role] Roles separated by comma
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetAll(start?: number, length?: number, orderby?: string, order?: string, search?: string, role?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetAll(start, length, orderby, order, search, role, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateOrUpdate(userDto: UserDto, options?: any): AxiosPromise<GetUserResponse> {
            return localVarFp.usersControllerCreateOrUpdate(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteAccount(options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.usersControllerDeleteAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} userIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUsers(userIds: string, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.usersControllerDeleteUsers(userIds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGet(id: string, options?: any): AxiosPromise<GetUserResponse> {
            return localVarFp.usersControllerGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [role] Roles separated by comma
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetAll(start?: number, length?: number, orderby?: string, order?: string, search?: string, role?: string, options?: any): AxiosPromise<GetUsersResponse> {
            return localVarFp.usersControllerGetAll(start, length, orderby, order, search, role, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersControllerCreateOrUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerCreateOrUpdateRequest
 */
export interface UsersApiUsersControllerCreateOrUpdateRequest {
    /**
     * 
     * @type {UserDto}
     * @memberof UsersApiUsersControllerCreateOrUpdate
     */
    readonly userDto: UserDto
}

/**
 * Request parameters for usersControllerDeleteUsers operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerDeleteUsersRequest
 */
export interface UsersApiUsersControllerDeleteUsersRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersControllerDeleteUsers
     */
    readonly userIds: string
}

/**
 * Request parameters for usersControllerGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerGetRequest
 */
export interface UsersApiUsersControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersControllerGet
     */
    readonly id: string
}

/**
 * Request parameters for usersControllerGetAll operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerGetAllRequest
 */
export interface UsersApiUsersControllerGetAllRequest {
    /**
     * The start of the request
     * @type {number}
     * @memberof UsersApiUsersControllerGetAll
     */
    readonly start?: number

    /**
     * The length of the request
     * @type {number}
     * @memberof UsersApiUsersControllerGetAll
     */
    readonly length?: number

    /**
     * order by field
     * @type {string}
     * @memberof UsersApiUsersControllerGetAll
     */
    readonly orderby?: string

    /**
     * order direction (asc | desc)
     * @type {string}
     * @memberof UsersApiUsersControllerGetAll
     */
    readonly order?: string

    /**
     * Search
     * @type {string}
     * @memberof UsersApiUsersControllerGetAll
     */
    readonly search?: string

    /**
     * Roles separated by comma
     * @type {string}
     * @memberof UsersApiUsersControllerGetAll
     */
    readonly role?: string
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {UsersApiUsersControllerCreateOrUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreateOrUpdate(requestParameters: UsersApiUsersControllerCreateOrUpdateRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreateOrUpdate(requestParameters.userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerDeleteAccount(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerDeleteAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {UsersApiUsersControllerDeleteUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerDeleteUsers(requestParameters: UsersApiUsersControllerDeleteUsersRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerDeleteUsers(requestParameters.userIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {UsersApiUsersControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGet(requestParameters: UsersApiUsersControllerGetRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {UsersApiUsersControllerGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetAll(requestParameters: UsersApiUsersControllerGetAllRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetAll(requestParameters.start, requestParameters.length, requestParameters.orderby, requestParameters.order, requestParameters.search, requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersRolesApi - axios parameter creator
 * @export
 */
export const UsersRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {UserRoleDto} userRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerCreateOrUpdateRole: async (userRoleDto: UserRoleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRoleDto' is not null or undefined
            assertParamExists('usersRolesControllerCreateOrUpdateRole', 'userRoleDto', userRoleDto)
            const localVarPath = `/api/users-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRoleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerDeleteRoles: async (ids: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('usersRolesControllerDeleteRoles', 'ids', ids)
            const localVarPath = `/api/users-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGetUserRole: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRolesControllerGetUserRole', 'id', id)
            const localVarPath = `/api/users-roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [includeDisabled] Include disabled roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGetUserRoles: async (start?: number, length?: number, orderby?: string, order?: string, search?: string, includeDisabled?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (length !== undefined) {
                localVarQueryParameter['length'] = length;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (includeDisabled !== undefined) {
                localVarQueryParameter['includeDisabled'] = includeDisabled;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersRolesApi - functional programming interface
 * @export
 */
export const UsersRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {UserRoleDto} userRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRolesControllerCreateOrUpdateRole(userRoleDto: UserRoleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserRoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRolesControllerCreateOrUpdateRole(userRoleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRolesControllerDeleteRoles(ids: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRolesControllerDeleteRoles(ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRolesControllerGetUserRole(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserRoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRolesControllerGetUserRole(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [includeDisabled] Include disabled roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRolesControllerGetUserRoles(start?: number, length?: number, orderby?: string, order?: string, search?: string, includeDisabled?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserRolesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRolesControllerGetUserRoles(start, length, orderby, order, search, includeDisabled, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersRolesApi - factory interface
 * @export
 */
export const UsersRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersRolesApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {UserRoleDto} userRoleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerCreateOrUpdateRole(userRoleDto: UserRoleDto, options?: any): AxiosPromise<GetUserRoleResponse> {
            return localVarFp.usersRolesControllerCreateOrUpdateRole(userRoleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerDeleteRoles(ids: string, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.usersRolesControllerDeleteRoles(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGetUserRole(id: string, options?: any): AxiosPromise<GetUserRoleResponse> {
            return localVarFp.usersRolesControllerGetUserRole(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {number} [start] The start of the request
         * @param {number} [length] The length of the request
         * @param {string} [orderby] order by field
         * @param {string} [order] order direction (asc | desc)
         * @param {string} [search] Search
         * @param {string} [includeDisabled] Include disabled roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRolesControllerGetUserRoles(start?: number, length?: number, orderby?: string, order?: string, search?: string, includeDisabled?: string, options?: any): AxiosPromise<GetUserRolesResponse> {
            return localVarFp.usersRolesControllerGetUserRoles(start, length, orderby, order, search, includeDisabled, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersRolesControllerCreateOrUpdateRole operation in UsersRolesApi.
 * @export
 * @interface UsersRolesApiUsersRolesControllerCreateOrUpdateRoleRequest
 */
export interface UsersRolesApiUsersRolesControllerCreateOrUpdateRoleRequest {
    /**
     * 
     * @type {UserRoleDto}
     * @memberof UsersRolesApiUsersRolesControllerCreateOrUpdateRole
     */
    readonly userRoleDto: UserRoleDto
}

/**
 * Request parameters for usersRolesControllerDeleteRoles operation in UsersRolesApi.
 * @export
 * @interface UsersRolesApiUsersRolesControllerDeleteRolesRequest
 */
export interface UsersRolesApiUsersRolesControllerDeleteRolesRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersRolesApiUsersRolesControllerDeleteRoles
     */
    readonly ids: string
}

/**
 * Request parameters for usersRolesControllerGetUserRole operation in UsersRolesApi.
 * @export
 * @interface UsersRolesApiUsersRolesControllerGetUserRoleRequest
 */
export interface UsersRolesApiUsersRolesControllerGetUserRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersRolesApiUsersRolesControllerGetUserRole
     */
    readonly id: string
}

/**
 * Request parameters for usersRolesControllerGetUserRoles operation in UsersRolesApi.
 * @export
 * @interface UsersRolesApiUsersRolesControllerGetUserRolesRequest
 */
export interface UsersRolesApiUsersRolesControllerGetUserRolesRequest {
    /**
     * The start of the request
     * @type {number}
     * @memberof UsersRolesApiUsersRolesControllerGetUserRoles
     */
    readonly start?: number

    /**
     * The length of the request
     * @type {number}
     * @memberof UsersRolesApiUsersRolesControllerGetUserRoles
     */
    readonly length?: number

    /**
     * order by field
     * @type {string}
     * @memberof UsersRolesApiUsersRolesControllerGetUserRoles
     */
    readonly orderby?: string

    /**
     * order direction (asc | desc)
     * @type {string}
     * @memberof UsersRolesApiUsersRolesControllerGetUserRoles
     */
    readonly order?: string

    /**
     * Search
     * @type {string}
     * @memberof UsersRolesApiUsersRolesControllerGetUserRoles
     */
    readonly search?: string

    /**
     * Include disabled roles
     * @type {string}
     * @memberof UsersRolesApiUsersRolesControllerGetUserRoles
     */
    readonly includeDisabled?: string
}

/**
 * UsersRolesApi - object-oriented interface
 * @export
 * @class UsersRolesApi
 * @extends {BaseAPI}
 */
export class UsersRolesApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {UsersRolesApiUsersRolesControllerCreateOrUpdateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRolesApi
     */
    public usersRolesControllerCreateOrUpdateRole(requestParameters: UsersRolesApiUsersRolesControllerCreateOrUpdateRoleRequest, options?: AxiosRequestConfig) {
        return UsersRolesApiFp(this.configuration).usersRolesControllerCreateOrUpdateRole(requestParameters.userRoleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {UsersRolesApiUsersRolesControllerDeleteRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRolesApi
     */
    public usersRolesControllerDeleteRoles(requestParameters: UsersRolesApiUsersRolesControllerDeleteRolesRequest, options?: AxiosRequestConfig) {
        return UsersRolesApiFp(this.configuration).usersRolesControllerDeleteRoles(requestParameters.ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {UsersRolesApiUsersRolesControllerGetUserRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRolesApi
     */
    public usersRolesControllerGetUserRole(requestParameters: UsersRolesApiUsersRolesControllerGetUserRoleRequest, options?: AxiosRequestConfig) {
        return UsersRolesApiFp(this.configuration).usersRolesControllerGetUserRole(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {UsersRolesApiUsersRolesControllerGetUserRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersRolesApi
     */
    public usersRolesControllerGetUserRoles(requestParameters: UsersRolesApiUsersRolesControllerGetUserRolesRequest = {}, options?: AxiosRequestConfig) {
        return UsersRolesApiFp(this.configuration).usersRolesControllerGetUserRoles(requestParameters.start, requestParameters.length, requestParameters.orderby, requestParameters.order, requestParameters.search, requestParameters.includeDisabled, options).then((request) => request(this.axios, this.basePath));
    }
}


